// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using BookStore.DAL.Models;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace BookStore.DAL.Data
{
    public partial class BOOK_STOREContext : IdentityDbContext<AspNetUser, AspNetRole, string>
    {
        public BOOK_STOREContext()
        {
        }

        public BOOK_STOREContext(DbContextOptions<BOOK_STOREContext> options)
            : base(options)
        {
        }

        //public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        //public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims { get; set; }
        //public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        //public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        //public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        //public virtual DbSet<AspNetUserRole> AspNetUserRoles { get; set; }
        //public virtual DbSet<AspNetUserToken> AspNetUserTokens { get; set; }
        public virtual DbSet<Book> Books { get; set; }
        public virtual DbSet<Cart> Carts { get; set; }
        public virtual DbSet<CartItem> CartItems { get; set; }
        public virtual DbSet<Review> Reviews { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
        public virtual DbSet<Wallet> Wallets { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            //modelBuilder.Entity<AspNetRole>(entity =>
            //{
            //    entity.HasIndex(e => e.NormalizedName, "RoleNameIndex")
            //        .IsUnique()
            //        .HasFilter("([NormalizedName] IS NOT NULL)");
            //});

            //modelBuilder.Entity<AspNetUser>(entity =>
            //{
            //    entity.HasNoDiscriminator().HasIndex(e => e.NormalizedUserName, "UserNameIndex")
            //        .IsUnique()
            //        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                //entity.HasMany(d => d.)
                //    .WithMany(p => p.Users)
                //    .UsingEntity<Dictionary<string, object>>(
                //        "AspNetUserRole",
                //        l => l.HasOne<AspNetRole>().WithMany().HasForeignKey("RoleId"),
                //        r => r.HasOne<AspNetUser>().WithMany().HasForeignKey("UserId"),
                //        j =>
                //        {
                //            j.HasKey("UserId", "RoleId");

                //            j.ToTable("AspNetUserRoles");

                //            j.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");
                //        });
            //});

            //modelBuilder.Entity<AspNetUserLogin>(entity =>
            //{
            //    entity.HasNoDiscriminator().HasKey(e => new { e.LoginProvider, e.ProviderKey });
            //});

            //modelBuilder.Entity<AspNetUserToken>(entity =>
            //{
            //    entity.HasNoDiscriminator().HasKey(e => new { e.UserId, e.LoginProvider, e.Name });
            //});

            modelBuilder.Entity<Book>(entity =>
            {
                entity.HasOne(d => d.User)
                    .WithMany(p => p.Books)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Books_AspNetUsers");
            });

            modelBuilder.Entity<Cart>(entity =>
            {
                entity.HasOne(d => d.User)
                    .WithMany(p => p.Carts)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Carts_AspNetUsers");
            });

            modelBuilder.Entity<CartItem>(entity =>
            {
                entity.HasOne(d => d.Book)
                    .WithMany(p => p.CartItems)
                    .HasForeignKey(d => d.BookId)
                    .HasConstraintName("FK_CartItems_Books");

                entity.HasOne(d => d.Cart)
                    .WithMany(p => p.CartItems)
                    .HasForeignKey(d => d.CartId)
                    .HasConstraintName("FK_CartItems_Carts");
            });

            modelBuilder.Entity<Review>(entity =>
            {
                entity.Property(e => e.Status).IsFixedLength();

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Reviews)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Reviews_AspNetUsers");

                entity.HasOne(d => d.UserNavigation)
                    .WithMany(p => p.Reviews)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Reviews_Books");
            });

            modelBuilder.Entity<Transaction>(entity =>
            {
                entity.HasOne(d => d.Cart)
                    .WithMany(p => p.Transactions)
                    .HasForeignKey(d => d.CartId)
                    .HasConstraintName("FK_Transactions_Carts");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.Transactions)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_Transactions_AspNetUsers");
            });

            modelBuilder.Entity<Wallet>(entity =>
            {
                entity.Property(e => e.Status).IsFixedLength();

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Wallets)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Wallets_AspNetUsers");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        void OnModelCreatingPartial(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
        }
    }
}